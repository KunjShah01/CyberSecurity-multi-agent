version: "3.8"

services:
  # Main API Service
  security-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
        VERSION: ${VERSION:-1.0.0}
    image: security-agents/api:${VERSION:-latest}
    container_name: security-agents-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Core API Keys
      - VT_API_KEY=${VT_API_KEY}
      - ABUSEIPDB_API_KEY=${ABUSEIPDB_API_KEY}
      - IPINFO_TOKEN=${IPINFO_TOKEN}
      - GEMINI_API_KEY=${GEMINI_API_KEY}

      # Optional API Keys
      - SERPAPI_KEY=${SERPAPI_KEY}
      - HIBP_API_KEY=${HIBP_API_KEY}
      - HUNTER_API_KEY=${HUNTER_API_KEY}

      # Alert Configuration
      - SMTP_SERVER=${SMTP_SERVER:-smtp.gmail.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASS=${EMAIL_PASS}
      - SLACK_WEBHOOK=${SLACK_WEBHOOK}
      - DISCORD_WEBHOOK=${DISCORD_WEBHOOK}

      # Database Configuration
      - DATABASE_URL=sqlite:///./data/security_agents.db
      - LOG_LEVEL=${LOG_LEVEL:-INFO}

      # Security Settings
      - SECRET_KEY=${SECRET_KEY}
      - JWT_EXPIRATION=${JWT_EXPIRATION:-24h}
      - CORS_ORIGINS=${CORS_ORIGINS:-["http://localhost:3000","http://localhost:8501"]}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./reports:/app/reports
      - ./config:/app/config
    networks:
      - security-network
    depends_on:
      - redis
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 2G
        reservations:
          cpus: "0.5"
          memory: 512M

  # Streamlit Dashboard
  security-dashboard:
    build:
      context: .
      dockerfile: docker/Dockerfile.dashboard
    image: security-agents/dashboard:${VERSION:-latest}
    container_name: security-agents-dashboard
    restart: unless-stopped
    ports:
      - "8501:8501"
    environment:
      - API_URL=http://security-api:8000
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
    volumes:
      - ./data:/app/data
      - ./reports:/app/reports
    networks:
      - security-network
    depends_on:
      - security-api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1G
        reservations:
          cpus: "0.25"
          memory: 256M

  # Redis for caching and queuing
  redis:
    image: redis:7-alpine
    container_name: security-agents-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./docker/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - security-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
        reservations:
          cpus: "0.1"
          memory: 128M

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: security-agents-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"
    networks:
      - security-network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: security-agents-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - security-network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M

  # Nginx reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: security-agents-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/ssl:/etc/nginx/ssl
    networks:
      - security-network
    depends_on:
      - security-api
      - security-dashboard
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: 128M

  # Worker for background tasks
  security-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: security-agents/worker:${VERSION:-latest}
    container_name: security-agents-worker
    restart: unless-stopped
    environment:
      # Same environment variables as API
      - VT_API_KEY=${VT_API_KEY}
      - ABUSEIPDB_API_KEY=${ABUSEIPDB_API_KEY}
      - IPINFO_TOKEN=${IPINFO_TOKEN}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=sqlite:///./data/security_agents.db
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./reports:/app/reports
    networks:
      - security-network
    depends_on:
      - redis
      - security-api
    command:
      [
        "python",
        "-m",
        "celery",
        "worker",
        "-A",
        "core.worker",
        "--loglevel=info",
      ]
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: "1.0"
          memory: 1G
        reservations:
          cpus: "0.25"
          memory: 256M

networks:
  security-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
